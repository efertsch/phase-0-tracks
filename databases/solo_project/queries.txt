1. Display the information in one table (either table is fine).

command: 
SELECT * FROM doctors;

output:
1|Paul Smith|Cardiovascular|15|true
2|John Taylor|Pediatry|50|false
3|Miriam Patrick|Pediatrics|31|true
4|Vanessa Galt|Neurology|12|true


2. Update an item that meets some condition (you can choose a condition that makes 	sense).

command:
UPDATE patients SET currently_insured="false" WHERE patient_id=4;
SELECT * FROM patients;

output:
1|Emilia Roth|48|true|1
2|Trey Mosser|23|true|4
3|James Olsen|3|true|3
4|Natalie Olsen|9|false|3
5|Tim Duncan|39|false|4
6|Mary Thompson|56|false|1
7|Bruce Basey|73|true|1

3. Display the information in both tables using one query.

command:
SELECT * FROM customer_information, customer_purchases WHERE customer_purchases.customer_id = customer_information.id;

output:
2|Paul Robinson|6715329456|666 Windlow Terrace Amesbury, MA|false|1|lava lamp|3|true|in store|2
2|Paul Robinson|6715329456|666 Windlow Terrace Amesbury, MA|false|2|unicycle|1|false|online|2
3|Missy Vandergard|6554318730|33 Moulton Lane Dallas, TX|true|3|bluetooth speaker|1|true|online|3
1|Ethan Fertsch|5223410987|589 Beaver Rd Nashville, TN|true|4|holographic picture of a cat|100|true|in store|1
3|Missy Vandergard|6554318730|33 Moulton Lane Dallas, TX|true|5|Beethoven mix-tape|1|false|in store|3
4|Felicia Chapman|9604721000|4678 Roosevelt Way Hillsdale, CA|true|6|Jackelope Taxidermy|2|true|online|4
1|Ethan Fertsch|5223410987|589 Beaver Rd Nashville, TN|true|7|Blue Body Suit|1|false|online|1
5|Bruce Armstrong|8558710346|590 Bishop Street Denver, CO|false|8|Sock Monkey|1|true|in store|5
4|Felicia Chapman|9604721000|4678 Roosevelt Way Hillsdale, CA|true|9|Goldfish Slippers|2|true|online|4
1|Ethan Fertsch|5223410987|589 Beaver Rd Nashville, TN|true|10|Easy Bake Oven|1|true|online|1
3|Missy Vandergard|6554318730|33 Moulton Lane Dallas, TX|true|11|Spawn Your Own Tarantula Kit|0|true|in store|3


4. Display a narrower selection of columns (fewer columns than all of them, in other words) from both tables using one query.

command: 
SELECT customer_information.customer_name, customer_purchases.item FROM customer_purchases JOIN customer_information ON customer_purchases.customer_id = customer_information.id;

Paul Robinson|lava lamp
Paul Robinson|unicycle
Missy Vandergard|bluetooth speaker
Ethan Fertsch|holographic picture of a cat
Missy Vandergard|Beethoven mix-tape
Felicia Chapman|Jackelope Taxidermy
Ethan Fertsch|Blue Body Suit
Bruce Armstrong|Sock Monkey
Felicia Chapman|Goldfish Slippers
Ethan Fertsch|Easy Bake Oven
Missy Vandergard|Spawn Your Own Tarantula Kit



5. Delete an item that meets some condition (you can choose a condition that makes sense).

command:
DELETE FROM customer_information WHERE id=5;
SELECT * FROM customer_information;

output:
1|Ethan Fertsch|5223410987|589 Beaver Rd Nashville, TN|true
2|Paul Robinson|6715329456|666 Windlow Terrace Amesbury, MA|false
3|Missy Vandergard|6554318730|33 Moulton Lane Dallas, TX|true
4|Felicia Chapman|9604721000|4678 Roosevelt Way Hillsdale, CA|true


6. Explore different types of joins.
Three different types of joins:

CROSS JOIN - 
Description:
Matches every row of the first table with every row of the second table.
Can produce very large tables and should be treated with care. 

Syntax:
SELECT ... FROM table1 CROSS JOIN table2 ...

INNER JOIN -
Description:
Creates a new table by combining column values of two tables based on join predicate. 
Most common type of join (is default). INNER keyword can be used optionally. 

Syntax:
SELECT ... FROM table1 [INNER] JOIN table2 ON conditional_expression ...

or 

with USING expression to specify list of 1 or more columns 
SELECT ... FROM table1 JOIN table2 USING ( column1 ,... ) ...

or 

with NATURAL JOIN which is similar to JOIN USING but it automatically tests for equality between the values of every column the exists in both tables
SELECT ... FROM table1 NATURAL JOIN table2...


OUTER JOIN -

Description:
Extension of INNER JOIN. SQLite only supports LEFT OUTER JOIN. 
Syntax (ON, USING, NATURAL) is identical to INNER JOIN but after initial join has been performed the OUTER JOIN with take any unjoined rows from one of both tables and add nulls in their place to the resulting table. 

Syntax:
SELECT ... FROM table1 LEFT OUTER JOIN table2 ON conditional_expression ...
