1. Display the information in one table (either table is fine).

command: 
SELECT * FROM doctors;

output:
1|Paul Smith|Cardiovascular|15|true
2|John Taylor|Pediatry|50|false
3|Miriam Patrick|Pediatrics|31|true
4|Vanessa Galt|Neurology|12|true


2. Update an item that meets some condition (you can choose a condition that makes 	sense).

command:
UPDATE patients SET currently_insured="false" WHERE patient_id=4;
SELECT * FROM patients;

output:
1|Emilia Roth|48|true|1
2|Trey Mosser|23|true|4
3|James Olsen|3|true|3
4|Natalie Olsen|9|false|3
5|Tim Duncan|39|false|4
6|Mary Thompson|56|false|1
7|Bruce Basey|73|true|1

3. Display the information in both tables using one query.

command:
SELECT * FROM patients, doctors WHERE patients.doctor_id = doctors.id;

output:
1|Emilia Roth|48|true|1|1|Paul Smith|Cardiovascular|15|true
2|Trey Mosser|23|true|4|4|Vanessa Galt|Neurology|12|true
3|James Olsen|3|true|3|3|Miriam Patrick|Pediatrics|31|true
4|Natalie Olsen|9|false|3|3|Miriam Patrick|Pediatrics|31|true
5|Tim Duncan|39|false|4|4|Vanessa Galt|Neurology|12|true
6|Mary Thompson|56|false|1|1|Paul Smith|Cardiovascular|15|true
7|Bruce Basey|73|true|1|1|Paul Smith|Cardiovascular|15|true

4. Display a narrower selection of columns (fewer columns than all of them, in other words) from both tables using one query.

command: 
SELECT patients.patient_name, doctors.doctor_name FROM patients JOIN doctors ON patients.doctor_id = doctors.id;

Emilia Roth|Paul Smith
Trey Mosser|Vanessa Galt
James Olsen|Miriam Patrick
Natalie Olsen|Miriam Patrick
Tim Duncan|Vanessa Galt
Mary Thompson|Paul Smith
Bruce Basey|Paul Smith



5. Delete an item that meets some condition (you can choose a condition that makes sense).

command:
DELETE FROM doctors WHERE valid_certification="false";
SELECT * FROM customer_information;

output:
1|Paul Smith|Cardiovascular|15|true
3|Miriam Patrick|Pediatrics|31|true
4|Vanessa Galt|Neurology|12|true


6. Explore different types of joins.
Three different types of joins:

CROSS JOIN - 
Description:
Matches every row of the first table with every row of the second table.
Can produce very large tables and should be treated with care. 

Syntax:
SELECT ... FROM table1 CROSS JOIN table2 ...

INNER JOIN -
Description:
Creates a new table by combining column values of two tables based on join predicate. 
Most common type of join (is default). INNER keyword can be used optionally. 

Syntax:
SELECT ... FROM table1 [INNER] JOIN table2 ON conditional_expression ...

or 

with USING expression to specify list of 1 or more columns 
SELECT ... FROM table1 JOIN table2 USING ( column1 ,... ) ...

or 

with NATURAL JOIN which is similar to JOIN USING but it automatically tests for equality between the values of every column the exists in both tables
SELECT ... FROM table1 NATURAL JOIN table2...


OUTER JOIN -

Description:
Extension of INNER JOIN. SQLite only supports LEFT OUTER JOIN. 
Syntax (ON, USING, NATURAL) is identical to INNER JOIN but after initial join has been performed the OUTER JOIN with take any unjoined rows from one of both tables and add nulls in their place to the resulting table. 

Syntax:
SELECT ... FROM table1 LEFT OUTER JOIN table2 ON conditional_expression ...
